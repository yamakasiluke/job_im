<div class="list-group-item">
    <div class="row">
        <div class="col-md-5">
            <strong class="{ text-danger: isExpired(), text-warning: hasNotMuchTime() }">{ text }</strong>
            <p if="{ isExpired() }" class="text-danger">The deadline is over</p>
            <p if="{ hasNotMuchTime() }" class="text-warning">Hurry up! The deadline will be over soon.</p>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <div class="input-group input-group-sm date" id="{ 'deadline_datetimepicker_' + id}">
                    <input type="text" name="deadline_el" class="form-control" placeholder="Deadline"/>
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-3">

            <div class="form-group" id="{ 'reminder_container_' + id}" style="display: none">
                <div class="input-group input-group-sm date" id="{ 'reminder_datetimepicker_' + id}">
                    <input type="text" name="deadline_el" class="form-control" placeholder="Reminder"/>
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
            <div class="btn btn-sm" onclick="{ addReminder }" title="{ getReminder() }">
                <a href="#" id="{ 'reminder_button_' + id} ">add reminder</a>
                <span if="{ hasReminder() }" class="glyphicon glyphicon-info-sign text-warning" ></span>
            </div>
        </div>
        <div class="col-md-1 text-right">
            <span
                class="{glyphicon: true, glyphicon-check: status == 'DONE', text-success: status == 'DONE', glyphicon-warning-sign: status == 'EXPIRED', glyphicon-unchecked: status == 'OPEN'}"
                onclick="{ changeTodoStatus }"
                title="{status == 'expired' ? 'Expired' : (status == 'DONE' ? 'Done' : '')}"></span>
        </div>
    </div>
</div>
<script type="text/javascript">
    function (context) {

        var self = this,
            _selectedDeadlineDate = null,
            _selectedReminderDate = null;

        function _toggleReminderDOM(show_picker) {
            $("#reminder_button_" + self.id).toggle(!show_picker);
            $("#reminder_container_" + self.id).toggle(show_picker);
        }

        self.changeTodoStatus = function () {

            if (self.status == 'OPEN') {
                $.postJSON(
                    '{{ route('command::mark-todo-as-done') }}',
                    {
                        todo_id: self.id,
                        status: "DONE"
                    }
                ).then(
                    function () {
                        self.status = 'DONE';
                        self.update();
                    },
                    $.failNotify
                );
            } else {
                $.postJSON(
                    '{{ route('command::reopen-todo') }}',
                    {
                        todo_id: self.id
                    }
                ).then(
                    function () {
                        self.status = 'OPEN';
                        self.update();
                    },
                    $.failNotify
                );
            }
        }

        self.isExpired = function () {
            if (!self.deadline) return false;
            if (self.status == 'DONE') return false;

            return moment().isAfter(moment(self.deadline));
        }

        self.hasNotMuchTime = function () {
            if (!self.deadline) return false;
            if (self.status == 'DONE') return false;
            if (self.isExpired()) return false;

            return moment().add(1, "hours").isAfter(moment(self.deadline));
        }

        self.saveDeadline = function (e) {
            if (!_selectedDeadlineDate && self.deadline) {
                $.appErrorNotify('Removing a deadline is not yet possible. Want to implement it? See https://github.com/prooph/proophessor-do')
                $(e.target).data("DateTimePicker").date(moment(self.deadline));

                return;
            }

            if (!_selectedDeadlineDate) {
                return;
            }

            if (!moment().add(5, "minutes").isBefore(e.date)) {
                $.appErrorNotify("Ooops. Your deadline is a way to short. Please try again.");
                return;
            }

            var newDeadline = _selectedDeadlineDate;

            $.postJSON(
                '{{ route('command::add-deadline-to-todo') }}',
                {
                    todo_id: self.id,
                    user_id: context.app.userId,
                    deadline: newDeadline
                }
            ).then(function () {
                    self.deadline = newDeadline;
                    self.status = 'OPEN';
                    self.update();
                },
                $.failNotify
            );
        }

        self.hasReminder = function(e) {
            return self.reminder !== null
        }

        self.saveReminder = function (e) {
            if (!_selectedReminderDate && self.reminder) {
                $.appErrorNotify('Removing a reminder is not yet possible. Want to implement it? See https://github.com/prooph/proophessor-do')
                $(e.target).data("DateTimePicker").date(moment(self.reminder));

                return;
            }

            if (!_selectedReminderDate) {
                return;
            }

            var newReminder = _selectedReminderDate;

            $.postJSON(
                '{{ route('command::add-reminder-to-todo') }}',
                {
                    todo_id: self.id,
                    user_id: context.app.userId,
                    reminder: newReminder
                }
            ).then(function () {
                    self.reminder = newReminder;
                    self.update();
                },
                $.failNotify
            );
        }

        self.addReminder = function () {
            _toggleReminderDOM(true);
            $("#reminder_datetimepicker_" + self.id).data("DateTimePicker").show();
        }

        self.getReminder = function (e) {
            if(self.hasReminder()) {
                return moment(self.reminder).fromNow();
            }

            return '';
        }

        self.on("mount", function () {

            var defaultDeadlineDate = self.deadline ? moment(self.deadline) : false;
            var defaultReminderDate = self.reminder ? moment(self.reminder) : false;

            $("#deadline_datetimepicker_" + self.id)
                .datetimepicker({
                    showClear: true,
                    useCurrent: false,
                    defaultDate: defaultDeadlineDate
                })
                .on("dp.change", function (e) {
                    _selectedDeadlineDate = e.date;
                })
                .on("dp.hide", self.saveDeadline);


            $("#reminder_datetimepicker_" + self.id)
                .datetimepicker({
                    showClear: true,
                    useCurrent: false,
                    defaultDate: defaultReminderDate
                })
                .on("dp.change", function (e) {
                    _selectedReminderDate = e.date;
                })
                .on("dp.hide", function (e) {
                    _toggleReminderDOM(false);
                    self.saveReminder(e)
                });
        });
    }
</script>
